library(datasets)
data(iris)"iris"
data(iris)
?iris
iris
sapply(iris,class)
tapply(iris,iris$Species,mean)
tapply(iris,as.factor(iris$Species),mean)
as.factor(iris$Species)
as.factor(iris$Species) == "virginica"
tapply(iris,(as.factor(iris$Species)="virginica",mean)
tapply(iris,(as.factor(iris$Species)=="virginica",mean)
tapply(iris,(as.factor(iris$Species)=="virginica"),mean)
tapply(iris,"virginica",mean)
levels(factor(iris$Species))
tapply(iris,(as.factor(iris$Species)=="virginica"),mean)
tapply(iris,(levels(factor(iris$Species))),mean)
tapply(iris$Sepal.Length,(levels(factor(iris$Species))),mean)
tapply(iris$Sepal.Length,levels(factor(iris$Species)),mean)
tapply('iris$Sepal.Length',levels(factor(iris$Species)),mean)
tapply(iris$Sepal.Length,list(levels(factor(iris$Species))),mean)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
library(mtcars)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars,class)
mtcars
mtcars
tapply(mtcars$mpg,mtcars$cyl,avg)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, mtcars$cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl=4)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl=8), mean)
split(mtcars$hp, mtcars$cyl)
cyllist <- split(mtcars$hp, mtcars$cyl)
cyllist <- split(mtcars, mtcars$cyl)
sapply(cyllist,mean)
sapply(cyllist[1],mean)
rm(cyllist)
cyllist <- split(mtcars, mtcars$cyl)
cyllist
rm(cyllist)
cyllist <- split(mtcars$hp, mtcars$cyl)
cyllist
rm(cyllist)
cyllist <- split(mtcars, mtcars$cyl)
cyllist
tapply(cyllist$8,cyllist$hp,mean)
tapply(cyllist$'8',cyllist$hp,mean)
tapply(cyllist[3],cyllist$hp,mean)
sapply(cyyllist$8,mean)
sapply(cyyllist$'8',mean)
sapply(cyyllist[3],mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl=8),mean)
sapply(split(mtcars$hp,(mtcars$cyl=8),mean)
sapply(split(mtcars$hp,(mtcars$cyl=8),mean)
3
cyllist[3]
cyllist[1]
cyllist'8'
cyllist$'8'
cyllist$'8'$hp
mean(cyllist$'8'$hp)
mean(cyllist$'8'$hp)-mean(cyllist$'4'$hp)
mean(cyllist$'4'$hp)
sapply(split(mtcars$hp, mtcars$cyl), mean)
debug(ls)
ls
n
ls
rm(list=ls())
\
bye()
exit
q
Q
q
ls
undebug(ls)
undebug(ls)
ls
?debug
undebug(ls())
getwd()
setwd("C:\Dev\datasciencecoursera\Getting and Cleaning Data\CleaningDataProject")
setwd("C:/Dev/datasciencecoursera/Getting and Cleaning Data/CleaningDataProject")
source("run_analysis.r")
head(secondTidySet)
head(activitiesWithNamesToKeep)
anotherTidy <- aggregate(. ~subjectId + activityId + activityType, activitiesWithNamesToKeep, mean)
head(anotherTidy)
colnames(anotherTidy)
colnames(secondTidySet)
secondTidySet$activityType
rm(list=ls())
## This is a script to download data for course project and create a tidy set.
rm(list=ls())
# Download data file if not already present
dataUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
dataFile <- "dataset.zip"
if(!file.exists(dataFile)){
download.file(dataUrl,dataFile,mode="wb")
unzip(dataFile)
}
# Read the data
dataFolder <- "UCI HAR Dataset"
trainingSubjects <- read.table(file.path(dataFolder,"train","subject_train.txt"))
trainingValues <- read.table(file.path(dataFolder,"train","x_train.txt"))
trainingActivity <- read.table(file.path(dataFolder,"train","y_train.txt"))
testSubjects <- read.table(file.path(dataFolder,"test","subject_test.txt"))
testValues <- read.table(file.path(dataFolder,"test","x_test.txt"))
testActivity <- read.table(file.path(dataFolder,"test","y_test.txt"))
#Read features
features <- read.table(file.path(dataFolder,"features.txt"),as.is=TRUE)
#Read Activity labels
activityLabels <- read.table(file.path(dataFolder,"activity_labels.txt"))
colnames(activityLabels) <- c('activityId','activityType')
#Merge all data into one data set
allActivities <- rbind(cbind(trainingSubjects,trainingActivity,trainingValues),
cbind(testSubjects,testActivity,testValues))
#Assign column names for combined data set
colnames(allActivities) <- c("subjectId","activityId",features[,2])
#Determining set of columns to keep from combined data set
columnsToKeep <- grepl("subject|activity|mean|std",colnames(allActivities))
activitiesToKeep <- allActivities[,columnsToKeep]
head(activitiesToKeep)
head(activityLabels)
activitiesWithNamesToKeep <- merge(activitiesToKeep,activityLabels, by = 'activityId',all.x = TRUE)
head(activitiesWithNamesToKeep)
#Replacing data set Column Names with descriptive Names
#Extracting column names from dataset
columnNames <- colnames(activitiesWithNamesToKeep)
#Removing special characters
columnNames <- gsub("\\(\\)","",columnNames)
#Expanding abbreviated and incorrect column names
columnNames <- gsub("^f", "frequency", columnNames)
columnNames <- gsub("^t", "time", columnNames)
columnNames <- gsub("Acc", "Accelerometer", columnNames)
columnNames <- gsub("Gyro", "Gyroscope", columnNames)
columnNames <- gsub("Mag", "Magnitude", columnNames)
columnNames <- gsub("Freq", "Frequency", columnNames)
columnNames <- gsub("mean", "Mean", columnNames)
columnNames <- gsub("std", "StandardDeviation", columnNames)
columnNames <- gsub("BodyBody", "Body", columnNames)
#Applying corrected column names back to data set
colnames(activitiesWithNamesToKeep) <- columnNames
head(activitiesWithNamesToKeep)
aggregate(. ~subjectId + activityId, activitiesWithNamesToKeep, mean)
colnames(secondTidySet)
aggregate(. ~subjectId + activityId + activityType, activitiesWithNamesToKeep, mean)
tmp <- aggregate(. ~subjectId + activityId + activityType, activitiesWithNamesToKeep, mean)
head(tmp)
secondTidySet <- aggregate(. ~subjectId + activityId + activityType, activitiesWithNamesToKeep, mean)
# Sorting data according to subjectId and activityId
secondTidySet <- secondTidySet[order(secondTidySet$subjectId,secondTidySet$activityId),]
# Writing second tidy data set to file.
write.table(secondTidySet,"secondTidySet.txt",row.names=FALSE)
head(secondTidySet)
